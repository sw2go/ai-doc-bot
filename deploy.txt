docker build -t company/ls-doc-bot .                          ... build local image 
docker run -p 3000:3000 --env-file .env company/ls-doc-bot    ... run local and test
docker push company/ls-doc-bot                                ... push the image to docker.io

Create a container instance on azure:
Resource-Group:     ls-doc-bot-group
Container-Name:     ls-doc-bot-app
Region:             (Europe) Switzerland North
Availability zones: None
SKU:                Standard
Image source:	    Other registry, Public
Image:		        company/ls-doc-bot
OS type:	        Linux
Number of CPU: 	    1
Memory (GiB):	    1.5
GPU type:	        None
Networking:	        Public
DNS name label:     ls-doc-bot
DNS nl scope reuse: Tenant
Ports:              3000 TCP
Restart policy:     On failure
Advanced:	        Enter your environment variables, details see below
Key management:     MMK

In Configuration > Application settings set environment variables
ADMIN_SECRET                        keyvault value e.g. @microsoft.keyvault(secretUri=https://your-key-vault.vault.azure.net/secrets/admin-secret/)
ALLOWED_ORIGINS                     list of semicolon separated urls e.g. https://chat.company.com;https://test.company.com
OPENAI_API_KEY                      keyvault value
PINECONE_API_KEY                    keyvault value
PINECONE_ENVIRONMENT                us-east4-gcp
PINECONE_INDEX_NAME                 myIndex
PROTECTED_CONTEXTS                  list of semicolon separated contextnames e.g. Contoso SA;productX
WEBSITES_ENABLE_APP_SERVICE_STORAGE true     ... important if data in the home folder must survive container restart
WEBSITES_PORT                       3000     ... for seamless startup tell azure explicitly the server port of the container 


To inspect the docker  container locally, run the image locally: 
docker run -p 3000:3000 --env-file .env company/ls-doc-bot

Find the running container name with:
docker ps

docker exec -it container-name sh

/app $





